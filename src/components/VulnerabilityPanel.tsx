import { useState } from "react";
import { 
  AlertTriangle, 
  Shield, 
  Bug, 
  Lock, 
  Eye, 
  Server,
  Globe,
  ExternalLink,
  CheckCircle,
  XCircle,
  Clock
} from "lucide-react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Progress } from "@/components/ui/progress";
import { Separator } from "@/components/ui/separator";

interface Vulnerability {
  id: string;
  title: string;
  severity: "critical" | "high" | "medium" | "low" | "info";
  cvss: number;
  cve?: string;
  description: string;
  endpoint: string;
  status: "open" | "fixed" | "investigating";
  discoveredAt: string;
  category: string;
}

interface VulnerabilityPanelProps {
  target: string;
}

const mockVulnerabilities: Vulnerability[] = [
  {
    id: "1",
    title: "SQL Injection in Login Form",
    severity: "critical",
    cvss: 9.8,
    cve: "CVE-2023-12345",
    description: "The login form is vulnerable to SQL injection attacks via the username parameter.",
    endpoint: "/login.php",
    status: "open",
    discoveredAt: "2024-01-15T10:30:00Z",
    category: "injection"
  },
  {
    id: "2",
    title: "Cross-Site Scripting (XSS)",
    severity: "high",
    cvss: 7.4,
    description: "Reflected XSS vulnerability in search functionality.",
    endpoint: "/search",
    status: "investigating",
    discoveredAt: "2024-01-14T15:45:00Z",
    category: "xss"
  },
  {
    id: "3",
    title: "Insecure Direct Object Reference",
    severity: "medium",
    cvss: 6.5,
    description: "Users can access other users' data by manipulating the user ID parameter.",
    endpoint: "/api/user/{id}",
    status: "open",
    discoveredAt: "2024-01-13T09:20:00Z",
    category: "access-control"
  },
  {
    id: "4",
    title: "Missing Security Headers",
    severity: "low",
    cvss: 3.1,
    description: "Server is missing important security headers like HSTS and CSP.",
    endpoint: "*",
    status: "open",
    discoveredAt: "2024-01-12T14:10:00Z",
    category: "configuration"
  }
];

export const VulnerabilityPanel = ({ target }: VulnerabilityPanelProps) => {
  const [selectedVuln, setSelectedVuln] = useState<Vulnerability | null>(null);

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical": return "destructive";
      case "high": return "warning";
      case "medium": return "accent";
      case "low": return "secondary";
      case "info": return "outline";
      default: return "outline";
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case "critical": return <AlertTriangle className="w-4 h-4 text-destructive" />;
      case "high": return <Bug className="w-4 h-4 text-warning" />;
      case "medium": return <Eye className="w-4 h-4 text-accent" />;
      case "low": return <Shield className="w-4 h-4 text-secondary" />;
      default: return <CheckCircle className="w-4 h-4 text-success" />;
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case "open": return <XCircle className="w-3 h-3 text-destructive" />;
      case "fixed": return <CheckCircle className="w-3 h-3 text-success" />;
      case "investigating": return <Clock className="w-3 h-3 text-warning" />;
      default: return <Clock className="w-3 h-3" />;
    }
  };

  const severityCounts = mockVulnerabilities.reduce((acc, vuln) => {
    acc[vuln.severity] = (acc[vuln.severity] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  return (
    <div className="h-full space-y-4">
      {/* Header with Stats */}
      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <h2 className="text-lg font-semibold text-primary">Vulnerability Assessment</h2>
          <Badge variant="outline" className="text-xs">
            {target || "No target selected"}
          </Badge>
        </div>

        {/* Severity Overview */}
        <div className="grid grid-cols-2 gap-3">
          <Card className="glass border-destructive/20">
            <CardContent className="p-3">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-xs text-muted-foreground">Critical</p>
                  <p className="text-xl font-bold text-destructive">{severityCounts.critical || 0}</p>
                </div>
                <AlertTriangle className="w-6 h-6 text-destructive" />
              </div>
            </CardContent>
          </Card>

          <Card className="glass border-warning/20">
            <CardContent className="p-3">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-xs text-muted-foreground">High</p>
                  <p className="text-xl font-bold text-warning">{severityCounts.high || 0}</p>
                </div>
                <Bug className="w-6 h-6 text-warning" />
              </div>
            </CardContent>
          </Card>

          <Card className="glass border-accent/20">
            <CardContent className="p-3">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-xs text-muted-foreground">Medium</p>
                  <p className="text-xl font-bold text-accent">{severityCounts.medium || 0}</p>
                </div>
                <Eye className="w-6 h-6 text-accent" />
              </div>
            </CardContent>
          </Card>

          <Card className="glass border-secondary/20">
            <CardContent className="p-3">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-xs text-muted-foreground">Low</p>
                  <p className="text-xl font-bold text-secondary">{severityCounts.low || 0}</p>
                </div>
                <Shield className="w-6 h-6 text-secondary" />
              </div>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Vulnerability List */}
      <Card className="glass border-border/50 flex-1">
        <CardHeader className="pb-3">
          <CardTitle className="text-sm">Discovered Vulnerabilities</CardTitle>
          <CardDescription className="text-xs">
            Click on a vulnerability to view details
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-3 max-h-96 overflow-y-auto">
          {mockVulnerabilities.map(vuln => (
            <div
              key={vuln.id}
              className="p-3 glass border border-border/50 rounded-lg cursor-pointer hover:border-primary/30 transition-all"
              onClick={() => setSelectedVuln(vuln)}
            >
              <div className="flex items-start justify-between mb-2">
                <div className="flex items-center space-x-2">
                  {getSeverityIcon(vuln.severity)}
                  <h4 className="text-sm font-medium">{vuln.title}</h4>
                </div>
                <div className="flex items-center space-x-2">
                  <Badge variant={getSeverityColor(vuln.severity) as any} className="text-xs">
                    {vuln.severity.toUpperCase()}
                  </Badge>
                  {getStatusIcon(vuln.status)}
                </div>
              </div>
              
              <div className="space-y-1">
                <div className="flex items-center justify-between text-xs">
                  <span className="text-muted-foreground">CVSS: {vuln.cvss}</span>
                  <span className="font-mono text-primary">{vuln.endpoint}</span>
                </div>
                {vuln.cve && (
                  <div className="flex items-center justify-between text-xs">
                    <Badge variant="outline" className="text-xs">
                      {vuln.cve}
                    </Badge>
                    <span className="text-muted-foreground">
                      {new Date(vuln.discoveredAt).toLocaleDateString()}
                    </span>
                  </div>
                )}
              </div>
            </div>
          ))}
        </CardContent>
      </Card>

      {/* Vulnerability Details Modal */}
      {selectedVuln && (
        <Card className="glass border-primary/20">
          <CardHeader className="pb-3">
            <div className="flex items-center justify-between">
              <CardTitle className="text-sm flex items-center space-x-2">
                {getSeverityIcon(selectedVuln.severity)}
                <span>{selectedVuln.title}</span>
              </CardTitle>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setSelectedVuln(null)}
              >
                Ã—
              </Button>
            </div>
          </CardHeader>
          <CardContent className="space-y-3">
            <div className="grid grid-cols-2 gap-3 text-xs">
              <div>
                <span className="text-muted-foreground">Severity:</span>
                <Badge variant={getSeverityColor(selectedVuln.severity) as any} className="ml-2 text-xs">
                  {selectedVuln.severity.toUpperCase()}
                </Badge>
              </div>
              <div>
                <span className="text-muted-foreground">CVSS Score:</span>
                <span className="ml-2 font-mono">{selectedVuln.cvss}</span>
              </div>
              <div>
                <span className="text-muted-foreground">Endpoint:</span>
                <span className="ml-2 font-mono text-primary">{selectedVuln.endpoint}</span>
              </div>
              <div>
                <span className="text-muted-foreground">Status:</span>
                <div className="ml-2 flex items-center space-x-1">
                  {getStatusIcon(selectedVuln.status)}
                  <span className="capitalize">{selectedVuln.status}</span>
                </div>
              </div>
            </div>

            <Separator />

            <div>
              <h5 className="text-sm font-medium mb-2">Description</h5>
              <p className="text-xs text-muted-foreground leading-relaxed">
                {selectedVuln.description}
              </p>
            </div>

            <div className="flex space-x-2">
              <Button variant="outline" size="sm" className="text-xs">
                <ExternalLink className="w-3 h-3 mr-1" />
                View in CVE Database
              </Button>
              <Button variant="outline" size="sm" className="text-xs">
                <Bug className="w-3 h-3 mr-1" />
                Create Report
              </Button>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};